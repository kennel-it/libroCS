<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html>
<!-- grafoIndice requires="maven API json http richiestaHttp rispostaHttp" group="spring" coords="80,30" -->
<!-- changelog 2023-04-11 inserito capitolo -->
<!-- changelog 2023-04-15 trattati parallelo MySQL e H2 -->
<!-- changelog 2023-04-15 messa definizione di microservizio -->
<!-- changelog 2023-05-02 inserito "spring.datasource.url=" e pacchetto per CrossOrigin -->
<!-- changelog 2024-03-21 piccole correzioni -->
<!-- changelog 2024-03-22 lasciata in questo capitolo soltanto introduzione -->
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta charset="UTF-8"/>
        <title>springBoot</title>
        <link type="text/css" rel="stylesheet" href="style.css"/>
        <script type="text/javascript" src="script/test.js"></script>
        <style>
            .h2::before, .mysql::before {
                background-size: contain;
                background-repeat: no-repeat;
                display: inline-block;
                content:"";
                height: 1em;
                width: 2em;
                margin: 0em 0.25em;
            }
            .h2 { background-color: #b9cafa}
            .h2::before { background-image: url('immagini/H2_logo.png') }
            .mysql {background-color: #ffc869}
            .mysql::before { background-image: url('immagini/mysql_logo.png') }
            section { padding:1em ; margin:1em 0}
            section.h2::before, section.mysql::before { height: 3em; width: 6em;}
        </style>
   </head>
<body>
<header>
    <h1>springBoot</h1>
    <p>scrivere velocemente dei micro servizi REST</p>
</header>
<article>
<h2>Architettura del sistema</h2>
<p>Dovendo costruire un sistema articolato nel suo progetto possiamo prendere
in considerazione due opposte soluzioni:
una architettura monolitica o una basata su microservizi.</p>

<p>Una <em>architettura monolitica</em> prevede che il sistema sia sviluppato come un unico
programma: un sistema di questo tipo ha alcuni vantaggi come la facilità iniziale di sviluppo,
la possibilità di ottimizzazione e la semplicità di fare test globali.
Ci sono però anche degli svantaggi: quando crescono sono più difficili da mantenere,
è difficile cambiare le tecnologie utilizzate e hanno bassa 
<a href="https://it.wikipedia.org/wiki/Scalabilit%C3%A0">scalabilità</a>.</p>

<p>In una <em>architettura a microservizi</em> non ho a che fare con una entità unica ma con più
programmi che offrono singoli servizi, un po' seguendo l'idea "fai una sola cosa e falla bene".
Fondamentalmente usando questa architettura gruppi più piccoli si sviluppatori
possono lavorare su un singolo servizio che può essere rilasciato molto velocemente, i singoli
gruppi sono liberi di scegliere la tecnologia da usare e di cambiarla e oltre questo
gli errori che riaguardano un singolo servizio sono più facili da trovare.
Ovviamente c'è un rovescio della medaglia, ad esempio: il sistema non ha caratteristiche comuni,
ogni volta che si aggiunge un microservizio il gruppo di sviluppo si deve organizzare per suo conto.</p>

<p style="text-align: center"><img style="width:6sssssssss0vw"
src="immagini/monolitico_microservizi.png"
alt="diagramma sistema monolitico e microservizi"/></p>

<h2>Cosa è Spring Boot</h2>
<p><a href="">Spring Boot</a>
è una estensione del 
<a href="https://spring.io/">framework Spring</a> il cui scopo 
è di mettere facilmente in esecuzione micro servizi web scritti in Java.
Si tratta di un <a href="https://it.wikipedia.org/wiki/Framework">framework</a>
cioè di un insieme di componenti preconfezionati che facilita lo sviluppo
di software, spesso utilizzando specifiche strategie di sviluppo.</p>
<p>Un framework si differenzia da quelle che chiamiamo librerie in alcuni aspetti:</p>
<ul>
    <li>la modalità con cui si svolgono le operazioni è dettata dal framework
    e non da chi lo usa</li>
    <li>esistono una serie di comportamenti di default</li>
    <li>chi usa il framework può estendere le sue funzionalità ma non 
    modificarlo</li>
</ul>

<h2>Perché Spring Boot</h2>
<p>Non è certo l'unico framework per scrivere applicazioni web ma:</p>
<ul>
    <li>riduce di molto il tempo di sviluppo aumentando la produttività</li>
    <li>evita la scrittura parti di codice ripetitive e file di configurazione</li>
    <li>è molto facile accedere ai database e salvare oggetti Java</li> 
    <li>adotta una strategia "Opinionated Defaults Configuration", in pratica in base alle dipendenze decide
    delle configurazioni di default</li>
    <li>fornisce un server web integrato per sviluppare le applicazioni (tomcat o altri)</li>
</ul>
</article>
</body>
</html>