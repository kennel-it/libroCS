<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html>
<!-- grafoIndice requires="" -->
<!-- changelog 2019-03-24 inserito capitolo -->
<!-- changelog 2019-03-25 inserite parti su commit e pull request -->
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
   	<meta charset="UTF-8"/>
       <title>git</title>
       <link type="text/css" rel="stylesheet" href="style.css"/>
       <script type="text/javascript" src="script/test.js"></script>         
   </head>
<body>
<header>
	<h1><img src="immagini/wip.png" alt="lavori in corso"/>git</h1>
	<p>collaborare nella scrittura di programmi</p>
</header>
<article>
	<p>Quello che vediamo è uno dei tanti modi possibili di collaborare 
	nella scrittura di software: useremo un archivio (repository) 
	condiviso già esistente su GitHub.</p>
	
	<h2>software</h2>
	<p>Attualmente gli ambienti di sviluppo più diffusi supportano git, 
	qui eseguiamo una installazione del software di base che ci permette
	di utilizzare git con GitHub senza bisogno di altro.
	È soltanto una delle tante possibilità!</p>
	<p>I programmi da installare sono due: la 
	<a href="https://git-scm.com/">versione a linea di comando di git</a>
	(niente paura non la dovremo usare per forza ma fa comodo averla in caso di problemi)
	e il <a href="https://desktop.github.com/">client desktop di GitHub</a>.</p>
	
	<p class="FIXME">serve un glossario</p>
	
	<h2>Scaricare il progetto</h2>
	<p>Al primo avvio GitHub Desktop richiede l'account per proseguire,
	poi apre la pagina iniziale in cui si possono creare nuovi repository
	o scaricarne di esistenti.</p>
	
	<p>Nel nostro caso vogliamo scaricare il progetto visibile ad esempio
	all'indirizzo <code>https://github.com/organizzazione/progetto</code>.</p>
	<ol>
		<li>click su "clone a repository from the Internet..."</li>
		<li>click su URL</li>
		<li>nel campo "repository URL" scriviamo "organizzazione/progetto"</li>
		<li>prendiamo nota di cosa c'è scritto nel campo sotto "Local path"
		perché è il punto in cui il progetto verrà scaricato.</li>
		<li>click su "clone"</li>
	</ol>
	<p>A questo punto avremo una cartella locale collegata al server remoto.</p>
	
	<h2>Modifiche al codice</h2>
	<p>Siccome vogliamo essere prudenti nel modificare il codice ed evitare di creare
	problemi a tutti gli altri che ci stanno lavorando creiamo un nuovo ramo di sviluppo.</p>
	<ol>
		<li>aprire GitHub Desktop</li>
		<li>selezionare il progetto (in alto a sinistra)</li>
		<li>click su "current branch"</li>
		<li>scrivere un nome utile (es: luigi_login se si sta lavorando sul login)</li>
		<li>click su "new branch"</li>
		<li>leggere il popup che si apre e se non ci sono problemi click su "create branch"</li>
	</ol>
	<p>Nonostante il pulsantone blu "publish branch" adesso non ci serve farlo, lo faremo
	quando che avremo delle modifiche utili da caricare.</p>
	
	<p>Le modifiche possono essere fatte con qualsiasi editor ci possa piacere: 
	<a href="https://www.eclipse.org/">Eclipse</a>,
	<a href="https://code.visualstudio.com/">VS Code</a>, Blocco Note, Gedit... 
	e almeno i primi due posso essere usati per gestire
	anche git ma qui useremo comunque ad usare il client di GitHub.</p>
	
	<p>Una volta fatte delle modifiche avremo una situazione analoga a questa:</p>
	<img src="immagini/ghd_1.png" alt="GitHub Desktop" style="border:1px solid black"/> 
	<p>Nella colonna a sinistra selezionando "changes" compaiono tutti i cambiamenti 
	(modifiche o inserimenti o rimozioni) non ancora gestiti da git e nella parte centrale
	selezionando il file è possibile vedere cosa è stato modificato (in rosso le cose 
	cancellate e in verde quelle inserite).</p>
	<p>Una volta fatti una serie di cambiamenti consistenti (magari per aggiungere 
	una funzionalità è stato necessario cambiare alcuni file) possiamo fare un commit:
	questa cosa è facile:</p>
	<ol>
		<li>selezionare tutti i file che vogliamo includere nel commit</li>
		<li>nella casella in basso (nell'esempio c'è "Update index.html") va scritta
		una sintesi di quello che si è fatto <em>è obbligatoria</em>, non metterla
		creerà problemi alle altre persone che collaborano con noi.</li>
		<li>nello spazio più in basso possiamo mettere una descrizione più articolata</li>
		<li>click su "commit to ____"</li>
	</ol>
	<p>Una volta fatto questo non avremo più cambiamenti visualizzati e potremmo farne altri
	se vogliamo e procedere allo stesso modo.
	<strong>Tieni presente che questi cambiamenti sono stati registrati sul nostro
	computer ma non sul server remoto di GitHub e i nostri colleghi non potranno vederli</strong></p>
	
	<h2>Pubblicare i cambiamenti</h2>
	<p>Dopo aver fatto alcuni cambiamenti vorremo caricare il tutto nel repository on-line,
	basta far click su "Publish branch"... a patto di essere autorizzati a farlo, 
	in caso contrario riceveremo un messaggio di errore e per risolvere la cosa sarà
	necessario farci aggiungere tra i collaboratori dal proprietario del repository
	fornendogli il proprio username (ad oggi inserendo l'email non trova gli utenti).</p>
	
	<p>Da qui in avanti ogni altro commit (o gruppo di commit) potrà essere
	caricato sul server facendo click su "push origin".</p>
	
	<h2>Pull request</h2>
	<p>Una volta finito il lavoro vorremmo che tutto quello che abbiamo fatto entri a far parte 
	del progetto principale... ma non è detto che anche il proprietario lo voglia!
	In questo caso possiamo fare un "pull request".</p>
	<ol>
		<li>aprire un browser e andare sul nostro progetto su GitHub</li>
		<li>al centro della pagina fare click sul simbolo dei merge: <img src="immagini/gh_merge.png" alt="merge" /></li>
		<li>nell'elenco dei rami far click su "Nel pull request" alla destra del ramo che vogliamo fondere 
		nella linea di sviluppo principale</li>
		<li><strong>la pagina che appare va osservata con tanta attenzione!</strong></li>
		<li>guardare in basso l'alengo delle modifiche</li>
		<li>riempire titolo e oggetto della modifica: <strong>
		se quello che viene scritto qui sembra inutile/incomprensibile
		è probabile che il pull venga rifiutato.</strong></li>
		<li>click su "create pull request"</li>
	</ol>
	<p>A questo punto quando la richiesta verrà approvata le modifiche entreranno a 
	far parte del ramo principale di sviluppo.</p>
	
	<h2>Aggiornamenti</h2>
	<p>A questo punto non ci resta che tenere d'occhio l'email per vedere se la nostra
	richiesta è stata accettata, una volta andata a buon fine (speriamo)
	basta riaprire GitHub Desktop e spostarsi sul ramo "master", aggiornare lo stato 
	(facendo click su "fetch origin" sulla destra) e poi fare "pull origin".</p>
	
	<h2>Eventuali problemi</h2>
	<h3>Proxy</h3>
	<p>se durante il download del progetto compare un errore tipo
	<code>unable to access '...'</code> oppure <code>Couldn't resolve host '...'.</code>
	è possibile che il problema dipenda dalla rete locale che fa uso di un proxy.</p>
	<p>Per risolvere il problema dovrebbe bastare aprire la linea di comando
	e scrivere qualcosa come (ovviamenter con i parametri della vostra rete):</p>
<pre>
git config --global http.proxy http://192.168.1.254:3128
git config --global https.proxy http://192.168.1.254:3128
</pre>
	
	<h3>Disinstallazione</h3>
	<p>Se disinstalli GitHub Desktop e vuoi far pulizia ricordari di cancellare
	la cartella <code>C:\Users\test\AppData\Roaming\GitHub Desktop</code>.</p>
	
</article>
</body>
</html>