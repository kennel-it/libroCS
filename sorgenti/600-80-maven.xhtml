<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html>
<!-- grafoIndice requires="xml" group="servizi" -->
<!-- changelog 2023-04-11 inserito capitolo -->
<!-- changelog 2023-04-13 aggiunto esempio per più librerie -->
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta charset="UTF-8"/>
        <title>maven</title>
        <link type="text/css" rel="stylesheet" href="style.css"/>
        <script type="text/javascript" src="script/test.js"></script>
   </head>
<body>
<header>
    <h1>maven</h1>
    <p>gestione automatizzata di progetti java</p>
</header>
<article>

<p>Maven oltre che essere una parola Yiddish che significa "accumulatore di conoscenza"
è un programma il cui scopo è quello solitamente definito come 
<a href="https://en.wikipedia.org/wiki/Build_automation">build automation</a>
cioè automatizzare le fasi di sviluppo del software (compilare, fare test, costruire pacchetti...).
È nato come risposta all'esigenza di gestire uno dei progetti della fondazione Apache:
il progetto era composto da diversi sottoprogetti ciascuno con una 
configurazione leggermente diversa dagli altri (il che crea ovviamente
problemi quando uno sviluppatore deve spostarsi da un progetto all'altro), 
quel che si voleva fare era creare una via standard per gestire le fasi di vita di
un progetto e al contempo ottenere una sua chiara descrizione e un modo facile
per condividere file
<a href="https://it.wikipedia.org/wiki/JAR_(formato_di_file)">JAR</a> generati tra diversi progetti.</p>
<p>Maven ora è lo strumento più usato per gestire progetti di ogni dimensione basati su Java.</p>


<h2>A cosa serve</h2>
<p>In breve a semplificare il lavoro di un gruppo di sviluppatori software consentendo di:</p>
<ul>
    <li>eseguire i test del progetto automaticamente</li>
    <li>compilare tutte le classi del programma</li>
    <li>scaricare le <em>dipendenze</em> di un progetto (cioè delle librerie scritte
    da altri sviluppatori che servono per i compiti più disparati come ad esempio trasformare
    un oggetto Java in JSON e viceversa, queste librerie possono avere dipendenze a loro volta...
    pensa a tutto Maven che per default per recuperare le librerie
    usa un <a href="https://www.maven.org/">archivio centrale</a>
    in cui sono memorizzati più di 260000 file jar (librerie in diverse versioni)</li>
    <li>impacchettare il programma in un singolo file, solitamente un JAR,
    che può poi essere caricato su un server web o dato ad un cliente ad esempio
    (o usato come libreria da un altro programma)</li>
</ul> 
<p>...e tante altre cose</p>
<p>Per portare a termine tutti i suoi compiti maven legge le impostazioni del progetto tramite 
il file <em>pom.xml</em> presente nella cartella principale del progetto stesso.</p>

<h2>Creare un progetto</h2>
<p>In un sistema attuale esistono molte opzioni per utilizzare Maven, ne vediamo due come esempio:
installarlo nel sistema o utilizzare un IDE che gestisce i progetti Maven.
Non è detto però che serva creare un nuovo progetto per usarlo:
magari è possibile che il progetto venga fornito già fatto</p>

<h3>Installarlo</h3>
<p>La via più ovvia è di <a href="https://maven.apache.org/download.cgi">scaricarlo</a>
prima e poi scompattarlo e mettendo la sua cartella "bin" nel path. In alternativa se si ha a disposizione
un ambiente tipo Unix (Linux, macOS, gitBash ...) si può installare
<a href="https://sdkman.io/">SdkMan</a> e poi far installare a lui Maven.</p>
<p>Una volta installato maven un comando tipo 
<code>mvn archetype:generate -DgroupId=it.edu.esempi -DartifactId=hello -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false</code>
provvederà a creare una nuova cartella contenente il progetto.</p>

<h3>Eclipse</h3>
<p>In Eclipse è possibile creare un nuovo progetto Maven direttamente dall'IDE. 
Dal pannello che si apre dal menu /File/new/Other selezionare "Maven project" nel gruppo Maven, 
al primo tentativo per semplicità conviene spuntare "Create a simple project (skip archetype selection)",
altrimenti al passo successivo Eclipse chiederà di selezionare un modello (Archetipo)
in base al quale creare il progetto.</p>
<p>Se si dovesse modificare in futuro il file pom.xml poi bisogna farci clik con il tasto destro e
selezionare "Maven/Update project..."</p>

<h2>Cartelle</h2>
<p>Un progetto viene generato a partire da un modello chiamato da Maven 
<a href="https://maven.apache.org/guides/introduction/introduction-to-archetypes.html">archetype</a>
e in base a questo vengono create alcune directory in posizioni standard, questo è uno degli
obiettivi di Maven: <em>organizzare un progetto (quindi le sue cartelle) in una 
<a href="https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">maniera prefissata</a>
in modo da potersi muovere tra progetti diversi con facilità</em>.
Se i file stanno nella cartelle giuste non serve configurare nulla, Maven li troverà da solo.</p>
<p>Non tutti i progetti contengono tutte le cartelle possibili,
troveremo però sempre una cartella <code>src</code> con dentro i sorgenti
organizzati per tipologia (ad esempio i programmi di test, i file principali, le risorse...)
e una cartella <code>target</code> creata all'occorrenza (ad esempio quando si compila) 
in cui verra generato l'output (le classi compilate ed altro).</p>

<h3>Un esempio di progetto</h3>
<p>Se si crea un semplice progetto spuntando "Create a simple project" in Eclipse
si ottiene una cosa del genere:</p>
<p><img src="immagini/progetto_maven.png" alt="progetto maven in eclipse"/></p>
<dl>
    <dt>src/main/java</dt>
    <dd>questa è la cartella in cui si trovano tutti i sorgenti Java del 
    nostro progetto</dd>
    <dt>src/main/resources</dt>
    <dd>immagini, fogli di stile e tutto quanto fa parte del 
    nostro progetto ma non è una classe java</dd>
    <dt>src/test/java</dt>
    <dd>in un progetto c'è bisogno di classi di test
    che dovranno essere inserite qui, queste classi non vanno caricate
    nel sistema in produzione</dd>
    <dt>src/test/resources</dt>
    <dd>tutto ciò che serve per i test e non è una classe java</dd>
    <dt>JRE System Library</dt>
    <dd>questa non è una cartella (non esiste su disco)mma la versione di java che stiamo utilizzando
    nel progetto... purtroppo una vecchissima ma la modificheremo</dd>
    <dt>src</dt>
    <dd>questa è la cartella che contiene in realtà le prime 4 cartelle elencate sopra</dd> 
    <dt>target</dt>
    <dd>questa è la cartella in cui lavora Maven: ci mette i file compilati e 
    tutto quello che produce come i pacchetti (niente di complicato! sono
    dei file "war" o "jar" che in pratica contengono il software compilato
    e gli altri file come le immagini che gli servono per funzionare)</dd>
    <dt>pom.xml</dt>
    <dd>file di configurazione di Maven, descritto nella prossima sezione</dd> 
    </dl>

<h2><a href="https://maven.apache.org/pom.html">pom.xml</a></h2>
<p>Questo è il file che definisce tutte le impostazioni del progetto, scritto in XML,
può contenere tantissime informazioni, adesso ci concentriamo su quelle principali
guardando un file di esempio:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  <em>&lt;!-- informazioni sul progetto --&gt;</em>
  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
  &lt;artifactId&gt;my-app&lt;/artifactId&gt;
  &lt;version&gt;1.2.1&lt;/version&gt;
  &lt;name&gt;my-app&lt;/name&gt;
  &lt;url&gt;http://www.example.com&lt;/url&gt;

  <em>&lt;!-- proprietà --&gt;</em>
  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;maven.compiler.release&gt;17&lt;/maven.compiler.release&gt;
  &lt;/properties&gt;

  <em>&lt;!-- dipendenze --&gt;</em>
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
      &lt;version&gt;2.13.3&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;
</pre>
<p>Vediamo qui sotto parte per parte quali informazioni stiamo fornendo a Maven 
con questo file.</p>

<h2>Informazioni sul progetto</h2>
<p>Sono in pratica quelle che descrivono il progetto al resto del mondo:</p>
<dl>
    <dt>goupId</dt>
    <dd>segue le regole dei pacchetti di java, identifica il progetto</dd>
    <dt>artifactId</dt>
    <dd>è il nome del singolo file jar, del pacchetto che stiamo creando</dd>
    <dt>version</dt>
    <dd>la vesrione attuale del progetto, il tipico 
    <a href="https://semver.org/spec/v1.0.0.html">numero di versione</a>
    che usa il punto</dd>
    <dt>name</dt>
    <dd>il nome del progetto</dd>
    <dt>url</dt>
    <dd>il sito web del progetto</dd>
</dl>

<h2>Proprietà</h2>
<p>Niente di più di proprietà generali... le due che sono presenti
nell'esempio sono molto importanti.</p>
<p><code>project.build.sourceEncoding</code> è
la codifica dei file sorgente: è importante, dobbiamo saperla e dirla a
Maven perché ad esempio le accentate potrebbero fare una brutta fine altrimenti.
Usualmente è UTF-8 ma in alcuni ambienti meglio essere sicuri:
da verificare in base all'editor che si usa.</p>

<p><code>maven.compiler.release</code> la versione di Java che stiamo utilizzando,
di nuovo molto importante! Magari a noi serve una particolare
caratteristica disponibile soltanto da una certa versione di Java in poi
ma non è detto che si possa liberamente scegliere perché
magari il server su cui verrà caricato il nostro progetto supporta fino al massimo
una certa versione e non oltre. In genere è più facile scaricare
la stessa versione del server sul client piuttosto che viceversa.</p>

<h2><a href="https://maven.apache.org/pom.html#dependencies">Dipendenze</a></h2>
<p>In questa sezione si specificano tutti i componenti software 
di cui il progetto ha bisogno: sarà poi compito di maven gestirli.
Per soddidfare le dipendenze di un progetto Maven cerca i componenti nel repository locale,
cioè una cartella nel nostro computer
(<code>.m2</code> nella home dell'utente) e se non li trova lì li scarica
dal suo <a href="https://repo.maven.apache.org/maven2/">repository centrale</a>.</p> 
<p>Di ogni componente possiamo specificare diversi parametri, vediamo i principali:</p>
<dl>
    <dt>groupId</dt>
    <dd>questo è il gruppo a cui appartiene 
    <a href="https://maven.apache.org/repositories/artifacts.html">l'artefatto</a></dd>
    <dt>artifactId</dt>
    <dd>l'identificativo dell'artefatto, insieme a <code>groupId</code> e 
    <code>version</code> sono in pratica le coordinate della dipendenza</dd>
    <dt>version</dt>
    <dd>è la versione specifica che ci interessa, questo paramentro può
    essere specificato in 
    <a href="https://maven.apache.org/pom.html#dependency-version-requirement-specification">diversi modi</a>,
    il più semplice dei quali è il solito sistema di numeri separati da punto</dd>
    <dt>scope</dt>
    <dd>"quando serve questa dipendenza?", se non viene specificato viene sottinteso
    <code>compile</code> che in pratica vuol dire che la dipendenza serve sempre,
    altrimenti è possibile specificare quando serve (ad esempio "soltanto per i test").</dd>
</dl>
<p>In genere per trovare "le coordinate" di un pacchetto è possibile cercare
su <a href="https://central.sonatype.com/?smo=true">Maven Central Repository</a>
se non si hanno i dati a disposizione.</p>

<h2>Gestire un progetto maven</h2>
<p>Per gestire da linea di comando un progetto Maven si usa la solita sintassi
<code>mvn &lt;comando&gt; [eventuali parametri]</code>, il bello è che i comandi sono
spesso dei plugin che se non abbiamo scaricato localmente vengono scaricati al volo
(ovviamente con tutte le dipendenze del caso) senza che si faccia nulla.</p>
<p>Proviamo a vedere alcuni esempi: <code>mvn clean</code> rimuove tutti i file generati 
in fase di compilazione/test, <code>mvn package</code> crea un pacchetto 
(solitamente un file jar) nella cartella target del progetto che poi può essere inviato
a chi deve usare il programma, <code>mvn dependency:tree</code> visualizza l'albero delle
dipendenze del progetto...</p> 

<h2>Un esempio: valutare espressioni</h2>
<p>Un mio programma tra le altre cose legge degli input che sono delle espressioni
come ad esempio <code>3+2*8/(2+2)</code> e ha bisogno di calcolarne il risultato.</p>

<h3>Trovare una libreria</h3>
<p>Potrei anche lavorare un pochino di tempo e scrivere un bel pezzo di software che valuta
qualsiasi espressione ma... non è facile e magari c'è chi lo ha già fatto
e cercando un pochino on line trovo una libreria: <em>javaluator</em>.
Sono convinto che ne esistano altre ma questa sembra andar bene e ha pure una licenza che mi
consente di utilizzarla!</p>

<p>Visto che ho trovato la libreria creo il progetto con Eclipse e tra le dipendenze
presenti nel file pom.xml inserisco questa:</p>
<pre>
  &lt;dependency&gt;
    &lt;groupId&gt;com.fathzer&lt;/groupId&gt;
    &lt;artifactId&gt;javaluator&lt;/artifactId&gt;
    &lt;version&gt;3.0.3&lt;/version&gt;
  &lt;/dependency&gt;
</pre>
<p>Dopo aver salvato chiedo ad eclipse di aggiornare il progetto (click destro sul pom.xml...)
e creo una classe nel cui metodo main scrivo:</p>
<pre>
String espressione = "3+2*8/(2+2)";
DoubleEvaluator valutatore = new DoubleEvaluator();
double risultato = valutatore.evaluate(espressione);
System.out.println(risultato);</pre>
<p>Funziona! Potrei andare avanti scrivendo il mio programma che tratta sequenze
di numeri non solo espressioni... devo spesso calcolare massimi/minimi e fare
diverse operazioni di questo genere con i numeri: anziché riscrivere
tutto da capo utilizzo un'altra libreria chiamata "Commons Lang" semplicemente
aggiungedo una ulteriore dipendenza nella sezione <code>&lt;dependencies&gt;</code>
del mio pom.xml che a questoi punto diventerà</p>
<pre>
&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;com.fathzer&lt;/groupId&gt;
    &lt;artifactId&gt;javaluator&lt;/artifactId&gt;
    &lt;version&gt;3.0.3&lt;/version&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.netbeans.external&lt;/groupId&gt;
    &lt;artifactId&gt;org-apache-commons-lang3&lt;/artifactId&gt;
    &lt;version&gt;RELEASE130&lt;/version&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;
</pre>

<p>Questa ultima ha un numero di versione un tantino strano ma pazienza.
Posso inserire tutte le dipendenze che voglio, meno facile è trovare quale libreria
fa al caso nostro: bisogna informarsi!</p>

<h2>In caso di proxy</h2>
<p>Maven fa accesso alla rete per scaricare il software,
se il nostro computer deve usare un proxy dobbiamo indicarlo in
uno specifico file di configurazione, questo file se usiamo eclipse
possiamo chiamarlo come vogliamo e salvarlo dove vogliamo.
Soltanto per esempio poniamo di chiamarlo "maven-setting.xml"
e di salvarlo sulla scrivania:</p>

<pre>
&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;proxies&gt;
    &lt;proxy&gt;
      &lt;id&gt;proxy-http&lt;/id&gt;
      &lt;active&gt;true&lt;/active&gt;
      &lt;protocol&gt;http&lt;/protocol&gt;
      &lt;host&gt;10.1.1.254&lt;/host&gt;
      &lt;port&gt;3128&lt;/port&gt;
    &lt;/proxy&gt;
    &lt;proxy&gt;
      &lt;id&gt;proxy-https&lt;/id&gt;
      &lt;active&gt;true&lt;/active&gt;
      &lt;protocol&gt;https&lt;/protocol&gt;
      &lt;host&gt;10.1.1.254&lt;/host&gt;
      &lt;port&gt;3128&lt;/port&gt;
    &lt;/proxy&gt;
  &lt;/proxies&gt;
&lt;/settings&gt;</pre>

<p>Ovviamente come host e come porta vanno inseriti quelli della nostra rete.</p>
<p>Una volta salvato il file bisogna indicarlo ad Eclipse:</p>
<ol>
    <li>aprire le preferenze di Eclipse</li>
    <li>aprire il gruppo "Maven"</li>
    <li>fare click su "User settings"</li>
    <li>fare click sul pulsante "browse" alla destra della casella "User Settings"</li>
</ol>

</article>
</body>
</html>